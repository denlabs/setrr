name: Docker Image CI

env:
  APP_NAME: setrr
  REPOSITORY_NAME: denislabelle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

    #   - name: Set up JDK 21
    #     uses: actions/setup-java@v4
    #     with:
    #       java-version: '21'
    #       distribution: 'temurin' # or any other distribution you prefer
    #       java-package: jdk
          
    #   - name: Build with Gradle
    #     run: ./gradlew clean build -x test

    #   - name: Capture version name
    #     id: capture_version
    #     run: |
    #       VERSION_NAME=$(./gradlew printVersionName -q)
    #       echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

    #   - name: Use version name
    #     run: echo "The version name is ${{ env.VERSION_NAME }}"
        
    #   - name: Build & Tag the Docker image
    #     run: docker build . --file Dockerfile --tag ${{ env.REPOSITORY_NAME }}/${{ env.APP_NAME }}:${{ env.VERSION_NAME }}

    #   - name: Log in to Docker Hub
    #     uses: docker/login-action@v2
    #     with:
    #       username: ${{ secrets.DOCKER_USERNAME }}
    #       password: ${{ secrets.DOCKER_PASSWORD }}

    #   - name: Push Docker Image 
    #     run: docker push ${{ env.REPOSITORY_NAME }}/${{ env.APP_NAME }}:${{ env.VERSION_NAME }}

      # - name: Install doctl
      #   uses: digitalocean/action-doctl@v2
      #   with:
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      # - name: Log in to DigitalOcean Container Registry with short-lived credentials
      #   run: doctl registry login --expiry-seconds 1200 -u "https://hub.docker.com/r/denislabelle/setrr"
          
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'  # You can specify a specific version if needed

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
        
      - name: Configure Kubernetes credentials
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          cat kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          mkdir $HOME/.kube
          cp kubeconfig.yaml $HOME/.kube/config
        
      # - name: Set Kubernetes context
      #   run: |
      #     echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      # - name: Echo Contexts
      #   id: step_one
      #   run: |
      #     {
      #       echo 'CONTEXTS<<EOL'
      #       kubectl config get-contexts
      #       echo EOL
      #     } >> "$GITHUB_ENV"
      - name: Apply Kubernetes deployment
        run: |
           kubectl config use-context do-tor1-faith-no-more-v1  
           kubectl apply -f ${{ runner.workspace }}/k8s/deployment.yaml --validate=false
        # kubectl apply -f ${{ github.workspace }}/k8s/deployment.yaml --validate=false
          
      # - name: Get Kubeconfig Contexts
      #   run: |
      #     CONTEXTS1=$(kubectl config get-contexts)
      #     echo "$CONTEXTS1"
      #     echo "CONTEXTS1<<EOF" >> $GITHUB_ENV
      #     echo "$CONTEXTS1" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV
          
      # - name: Output Var
      #   run: | 
      #     echo ${{ env.CONTEXTS }}
      #     echo "SOMETHING ELSE"
      #     echo ${{ env.CONTEXTS1 }}
